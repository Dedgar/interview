package main

import (
	"fmt"
)

/*
func Search(nums []int, target int) int {
	bot, top := 0, target

	for bot < top {
		h := int(uint(bot+top) >> 1)
		if !nums[h] {
			i = h + 1
		} else {
			j = h
		}
	}

	return i
}
*/

func search(nums []int, target int) int {
	numCount := len(nums)

	// Don't waste time iterating slices that exclusively contain bigger or smaller numbers than the target
	if nums[0] > target || nums[numCount-1] < target {
		return -1
	}

	bot := 0
	top := numCount - 1

	for bot <= top {
		mid := (bot + top) / 2
		if nums[mid] > target {
			top = mid - 1
		} else if nums[mid] < target {
			bot = mid + 1
		} else {
			return mid
		}
	}

	return -1
}

func main() {
	fmt.Println(search([]int{-1, 0, 3, 5, 9, 12}, 9))
	fmt.Println(search([]int{-1, 0, 3, 5, 9, 12}, 2))
	fmt.Println(gSearch([]int{-1, 0, 3, 5, 9, 12}, 9))
	fmt.Println(gSearch([]int{-1, 0, 3, 5, 9, 12}, 2))
}

func gSearch(nums []int, target int) int {
	bot, top := 0, len(nums)

	for bot < top {
		mid := int(uint(bot+top) >> 1)
		if nums[bot] >= target {
			bot = mid + 1
		} else {
			top = mid
		}
	}

	return bot
}

// Convenience wrappers for common cases.

//func searchInts(a []int, x int) int {
//	return gSearch(len(a), func(i int) bool { return a[i] >= x })
//}
